this function works like a class, it creates a list
# that contains 4 member functions: set, get, setInv
# and getInv. it uses <<- assignment operator so that
# these internal variables are not exposed to the
# outside environment.
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL # this is where the result of inversion is stored
# A setter function, use this to set a matrix to object created by makeCacheMatrix function
# e.g makeCacheMatrix(testmatrix) # here we work on testmatrix
# makeCacheMatrix$set(testmatrix1) # here we work on testmatrix1
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
get <- function() x # return the input matrix
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
# return a list that contains these functions, so that we can use
# makeCacheMatrix object like these
# x <- makeCacheMatrix(testmatrix)
# x$set(newmatrix) # to change matrix
# x$get # to get the setted matrix
# x$setInv # to set the inversed matrix
# x$getInv # to get the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
m <- x$getInv() # get the inversed matrix from object x
# it will be null if uncalculated, remember the first line "xinv <- NULL" in the previous function
if(!is.null(m)) { # if the inversion result is there
message("getting cached data")
return(m) # return the calculated inversion
}
data <- x$get() # if not, we do x$get to get the matrix object
m <- solve(data) # we solve it
x$setInv(m) # we then set it to the object
m # return the solved result
}
# Test
# generate a random square, non-singular matrix
test <- matrix(runif(9,1,100),3,3)
# generate the makeCacheMatrix object with this matrix
testCached <- makeCacheMatrix(test)
# from now on calculate or retrieve calculated inversion using the cacheSolve function
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
this function works like a class, it creates a list
# that contains 4 member functions: set, get, setInv
# and getInv. it uses <<- assignment operator so that
# these internal variables are not exposed to the
# outside environment.
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL # this is where the result of inversion is stored
# A setter function, use this to set a matrix to object created by makeCacheMatrix function
# e.g makeCacheMatrix(testmatrix) # here we work on testmatrix
# makeCacheMatrix$set(testmatrix1) # here we work on testmatrix1
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
get <- function() x # return the input matrix
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
# return a list that contains these functions, so that we can use
# makeCacheMatrix object like these
# x <- makeCacheMatrix(testmatrix)
# x$set(newmatrix) # to change matrix
# x$get # to get the setted matrix
# x$setInv # to set the inversed matrix
# x$getInv # to get the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
m <- x$getInv() # get the inversed matrix from object x
# it will be null if uncalculated, remember the first line "xinv <- NULL" in the previous function
if(!is.null(m)) { # if the inversion result is there
message("getting cached data")
return(m) # return the calculated inversion
}
data <- x$get() # if not, we do x$get to get the matrix object
m <- solve(data) # we solve it
x$setInv(m) # we then set it to the object
m # return the solved result
}
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source("ProgrammingAssignment2/cachematrix.R")
getwd()
source("C:/Users/KuPunyaNadhi/Documents/GitHub/ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source("C:/Users/KuPunyaNadhi/Documents/GitHub/ProgrammingAssignment2/cachematrix.R")
source("ProgrammingAssignment2/cachematrix.R")
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source("C:/Users/KuPunyaNadhi/Documents/GitHub/ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
